<?php

/**
 * @file
 *
 * Vejlebib FBS module file.
 */

/**
 * Implements hook_menu_alter()
 */
function vejlebib_fbs_menu_alter(&$items) {
  $items['ding_availability/holdings']['page callback'] = 'vejlebib_fbs_holdings';
}

/**
 * Page callback for availability holdings.
 *
 * This calls ding_availability_holdings() like the original callack and is
 * just used to get an opportunity to get the provider id.
 *
 * @param array $provider_ids
 *   Providers ID's to fetch holdings information for.
 */
function vejlebib_fbs_holdings($provider_ids) {
  $provider_ids = explode(',', $provider_ids);

  // FBS doesn't support multiple ids anyway, so only modify holding rows for
  // the first id.
  vejlebib_fbs_get_provider_id(reset($provider_ids));

  drupal_json_output(ding_availability_holdings($provider_ids));
}

/**
 * Implements hook_preprocess_ding_holdings().
 */
function vejlebib_fbs_preprocess_ding_holdings(&$vars) {
  if (!empty($vars['holdings']['#rows'])) {
    $provider_id = vejlebib_fbs_get_provider_id();
    $ding_entity_id = ding_provider_build_entity_id($provider_id);
    $suffix = '';

    // Emulate ALMA shelf_mark if possible.
    if (module_exists('ting_marc')) {
      $entity = ting_marc_load_object($ding_entity_id);
      $field652m = vejlebib_fbs_get_marc_field($entity, '652', 'm');
      $field652o = vejlebib_fbs_get_marc_field($entity, '652', 'o');

      // Special handling for music:
      // Field 039.a and 039.b is used for data about music shelf_mark, so we
      // use this as an indicator for music materials.
      if ($field039a = vejlebib_fbs_get_marc_field($entity, '039', 'a')) {
        $suffix .= vejlebib_fbs_translate_marc($field039a, '039.a');

        // We'll also append additional subfields if present.
        if ($field039b = vejlebib_fbs_get_marc_field($entity, '039', 'b')) {
          $suffix .= ' ' . vejlebib_fbs_translate_marc($field039b, '039.b');
        }
      }
      // Use the 'sk' marker to determine if this is non-fiction.
      // It seems to present in both the 'm' and 'o' subfield so we check them
      // to be sure.
      else if ($field652m != 'sk' && $field652o != 'sk') {
        // DK5 classification.
        $suffix .= $field652m;

        // Additonal descriptors from the DK5 classification.
        if ($field652b = vejlebib_fbs_get_marc_field($entity, '652', 'b')) {
          $suffix .= ' ' . $field652b;
        }
        else if ($field652a = vejlebib_fbs_get_marc_field($entity, '652', 'a')) {
          $suffix .= ' ' . $field652a;
          if ($field652h = vejlebib_fbs_get_marc_field($entity, '652', 'h')) {
            $suffix .= ', ' . $field652h;
          }
        }
      }

      // Generate and append the standard suffix for ALMA shelf_mark. We prefer
      // marc fields in the following order:
      $candidates = array(
        '100.a',
        '110.a',
        '239.a',
        '245.a',
      );

      if ($shelf_mark = vejlebib_fbs_pick_marc_field($entity, $candidates)) {
        // If we found a shelf_mark and there's already something in suffix,
        // remember to add a seperator.
        if ($suffix) {
          $suffix .= ' >';
        }
        $suffix .= ' ' . vejlebib_fbs_pick_marc_field($entity, $candidates);
      }
    }
    else {
      $entity = ding_entity_load($ding_entity_id);
      // Placement suffix.

      //If non-fiction add the classifation. Returns empty string if 'sk'.
      if ($classification = $entity->getClassification()) {
        $suffix = $classification;
      }
      // Else look for a creator of type oss:sort.
      else if (!empty($entity->reply->record['dc:creator']['oss:sort'])) {
        // This will be an array. Assume the first creator should be shown.
        $suffix = reset($entity->reply->record['dc:creator']['oss:sort']);
      }
    }

    if ($suffix) {
      foreach ($vars['holdings']['#rows'] as &$row) {
        $row['placement'] .= ' > ' . $suffix;
      }
    }
  }
}

/**
 * Get/set the current provider_id.
 */
function vejlebib_fbs_get_provider_id($set = NULL) {
  $provider_id = &drupal_static(__FUNCTION__);

  if (!isset($provider_id) && isset($set)) {
    $provider_id = $set;
  }

  return $provider_id;
}

/**
 *  Helper to get the value of the specified marc field.
 */
function vejlebib_fbs_get_marc_field($entity, $field, $subfield = NULL) {
  $value = $entity->getValue($field, $subfield);

  // Ensure single value returned if subfield is specified.
  if (isset($subfield) && is_array($value)) {
    $value = trim(reset($value));
  }

  return $value ? $value : NULL;
}

/**
 * Helper function to pick marc subfield from a range of candidates.
 */
function vejlebib_fbs_pick_marc_field($entity, array $candidates) {
  foreach ($candidates as $candidate) {
    list($field, $subfield) = explode('.', $candidate);

    if ($field_value = vejlebib_fbs_get_marc_field($entity, $field, $subfield)) {
      return $field_value;
    }
  }
  return NULL;
}

/**
 * Tranlate a marc string code to a human readable label.
 */
function vejlebib_fbs_translate_marc($code, $field) {
  $translations = _vejlebib_fbs_get_marc_039a_translations();

  if ($field == '039.a') {
    $translations = _vejlebib_fbs_get_marc_039a_translations();
  }
  else if ($field == '039.b') {
    $translations = _vejlebib_fbs_get_marc_039b_translations();
  }

  return isset($translations[$code]) ? $translations[$code] : NULL;
}

/**
 * Helper function to hold marc field 039.a machine code translations.
 *
 * See: http://www.kat-format.dk/danMARC2/Danmarc2.22.htm#pgfId=1574621
 */
function _vejlebib_fbs_get_marc_039a_translations() {
  return array (
    'sam' => 'SAMLINGER',
    'mir' => 'MIDDELALDER/RENÆSSANCE',
    'mia' => 'MIDDELALDER/RENÆSSANCE. ANTOLOGIER',
    'avg' => 'AVANTGARDE',
    'ava' => 'AVANTGARDE. ANTOLOGIER',
    'ork' => 'ORKESTERMUSIK',
    'ora' => 'ORKESTERMUSIK. ANTOLOGIER',
    'kam' => 'KAMMERMUSIK',
    'kaa' => 'KAMMERMUSIK. ANTOLOGIER',
    'eti' => 'ET INSTRUMENT',
    'eta' => 'ET INSTRUMENT. ANTOLOGIER',
    'vok' => 'VOKALMUSIK',
    'voa' => 'VOKALMUSIK. ANTOLOGIERø',
    'opr' => 'OPERAER',
    'opa' => 'OPERAER. ANTOLOGIER',
    'otm' => 'OPERETTER/MUSICALS',
    'ota' => 'OPERETTER/MUSICALS. ANTOLOGIER',
    'new' => 'NEW AGE',
    'fol' => 'FOLKEMUSIK',
    'blu' => 'BLUES',
    'bla' => 'BLUES. ANTOLOGIER',
    'jaz' => 'JAZZ',
    'jaa' => 'JAZZ. ANTOLOGIER',
    'bef' => 'ROCK',
    'bea' => 'ROCK. ANTOLOGIER',
    'und' => 'UNDERHOLDNING',
    'dau' => 'DANSK UNDERHOLDNING',
    'fau' => '**FÆRØSK UNDERHOLDNING',
    'jul' => 'JULEMUSIK',
    'fil' => 'FILMMUSIK',
    'tes' => 'TESTPLADER',
    'mmo' => 'MUSIC MINUS ONE',
    'hib' => 'HISTORIER. BØRN',
    'mub' => 'MUSIK. BØRN',
  );
}

/**
 * Helper function to hold marc field 039.b machine code translations.
 *
 * See: http://www.kat-format.dk/danMARC2/Danmarc2.22.htm#pgfId=1574621
 */
function _vejlebib_fbs_get_marc_039b_translations() {
  return array(
    'ad' => 'Andorra',
    'ae' => 'Forenede Arabiske Emirater',
    'af' => 'Afghanistan',
    'ag' => 'Antigua og Barbuda',
    'ai' => 'Anguilla',
    'al' => 'Albanien',
    'am' => 'Armenien',
    'ao' => 'Angola',
    'aq' => 'Antarktis',
    'ar' => 'Argentina',
    'as' => 'Amerikansk Samoa',
    'at' => 'Østrig',
    'au' => 'Australien',
    'aw' => 'Aruba',
    'az' => 'Aserbajdsjan',
    'ba' => 'Bosnien-Hercegovina',
    'bb' => 'Barbados',
    'bd' => 'Bangladesh',
    'be' => 'Belgien',
    'bf' => 'Burkina Faso',
    'bg' => 'Bulgarien',
    'bh' => 'Bahrein',
    'bi' => 'Burundi',
    'bj' => 'Benin',
    'bm' => 'Bermuda',
    'bn' => 'Brunei',
    'bo' => 'Bolivia',
    'bq' => 'Bonaire, Sint Eustatius og  Saba',
    'br' => 'Brasilien',
    'bs' => 'Bahamas',
    'bt' => 'Bhutan',
    'bv' => 'Bouvetøen',
    'bw' => 'Botswana',
    'by' => 'Hviderusland (Belarus)',
    'bz' => 'Belize',
    'ca' => 'Canada',
    'cc' => 'Kokosøerne',
    'cf' => 'Centralafrikanske Republik',
    'cg' => 'Congo',
    'ch' => 'Svejts',
    'ci' => 'Elfenbenskysten',
    'ck' => 'Cookøerne',
    'cl' => 'Chile',
    'cm' => 'Cameroun',
    'cn' => 'Kina',
    'co' => 'Colombia',
    'cr' => 'Costa Rica',
    'cu' => 'Cuba',
    'cv' => 'Kap Verde',
    'cw' => 'Curaçao',
    'cx' => 'Christmas Island',
    'gb' => 'Storbritannien',
    'gd' => 'Grenada',
    'ge' => 'Georgien',
    'gf' => 'Fransk Guyana',
    'gh' => 'Ghana',
    'gi' => 'Gibraltar',
    'gl' => 'Grønland',
    'gm' => 'Gambia',
    'gn' => 'Guinea',
    'gp' => 'Guadeloupe',
    'gq' => 'Ækvatorialguinea',
    'gr' => 'Grækenland',
    'gs' => 'South Georgia og De Sydlige ',
    'Sa' => 'dwichøer',
    'gt' => 'Guatemala',
    'gu' => 'Guam',
    'gw' => 'Guinea-Bissau',
    'gy' => 'Guyana',
    'hk' => 'Hongkong',
    'hm' => 'Heard- og McDonaldøerne',
    'hn' => 'Honduras',
    'hr' => 'Kroatien',
    'ht' => 'Haiti',
    'hu' => 'Ungarn',
    'id' => 'Indonesien',
    'ie' => 'Irland',
    'il' => 'Israel',
    'in' => 'Indien',
    'io' => 'Britiske Territorium i Det Indiske Ocean',
    'iq' => 'Irak',
    'ir' => 'Iran',
    'is' => 'Island',
    'it' => 'Italien',
    'jm' => 'Jamaica',
    'jo' => 'Jordan',
    'jp' => 'Japan',
    'ke' => 'Kenya',
    'kg' => 'Kirgisistan',
    'kh' => 'Cambodja',
    'ki' => 'Kiribati',
    'km' => 'Comorerne',
    'kn' => 'St. Christopher og Nevis',
    'kp' => 'Nordkorea',
    'kr' => 'Sydkorea',
    'kw' => 'Kuwait',
    'ky' => 'Caymanøerne',
    'kz' => 'Kasakhstan',
    'la' => 'Laos',
    'lb' => 'Libanon',
    'lc' => 'St. Lucia',
    'li' => 'Liechtenstein',
    'lk' => 'Sri Lanka',
    'lr' => 'Liberia',
    'ls' => 'Lesotho',
    'lt' => 'Litauen',
    'lu' => 'Luxembourg',
    'lv' => 'Letland',
    'ly' => 'Libyen',
    'ma' => 'Marokko',
    'mc' => 'Monaco',
    'md' => 'Moldova',
    'mg' => 'Madagaskar',
    'mh' => 'Marshalløerne',
    'mk' => 'Makedonien, Den tidligere jugoslaviske republik',
    'ml' => 'Mali',
    'mm' => 'Myanmar',
    'mn' => 'Mongoliet',
    'mo' => 'Macao',
    'mp' => 'Nordmarianerne',
    'mq' => 'Martinique',
    'mr' => 'Mauretanien',
    'ms' => 'Montserrat',
    'mt' => 'Malta',
    'mu' => 'Mauritius',
    'mv' => 'Maldiverne',
    'mw' => 'Malawi',
    'mx' => 'Mexico',
    'my' => 'Malaysia',
    'mz' => 'Mozambique',
    'na' => 'Namibia',
    'nc' => 'Ny Caledonien',
    'ne' => 'Niger',
    'nf' => 'Norfolk Island',
    'ng' => 'Nigeria',
    'ni' => 'Nicaragua',
    'nl' => 'Holland',
    'no' => 'Norge',
    'np' => 'Nepal',
    'nr' => 'Nauru',
    'nu' => 'Niue',
    'nz' => 'New Zealand',
    'om' => 'Oman',
    'pa' => 'Panama',
    'pe' => 'Peru',
    'pf' => 'Fransk Polynesien',
    'pg' => 'Papua Ny Guinea',
    'ph' => 'Filippinerne',
    'pk' => 'Pakistan',
    'pl' => 'Polen',
    'pm' => 'Saint Pierre et Miquelon',
    'pn' => 'Pitcairn',
    'pr' => 'Puerto Rico',
    'ps' => 'Palæstina',
    'pt' => 'Portugal',
    'pw' => 'Palau',
    'py' => 'Paraguay',
    'qa' => 'Qatar',
    're' => 'Réunion',
    'ro' => 'Rumænien',
    'ru' => 'Rusland',
    'rw' => 'Rwanda',
    'sa' => 'Saudi-Arabien',
    'sb' => 'Salomonøerne',
    'sc' => 'Seychellerne',
    'sd' => 'Sudan',
    'se' => 'Sverige',
    'sg' => 'Singapore',
    'sh' => 'Sankt Helena',
    'si' => 'Slovenien',
    'sj' => 'Svaldbard og Jan Mayen',
    'sk' => 'Slovakiet',
    'sl' => 'Sierra Leone',
    'sm' => 'San Marino',
    'sn' => 'Senegal',
    'so' => 'Somalia',
    'sr' => 'Surinam',
    'ss' => 'Sydsudan',
    'st' => 'Sao Tomé og Principe',
    'sv' => 'El Salvador',
    'sx' => 'Sint Maarten (Hollandsk del)',
    'sy' => 'Syrien',
    'sz' => 'Swaziland',
    'tc' => 'Turks- og Caicosøerne',
    'td' => 'Tchad',
    'tf' => 'Franske Territorier, Sydlige',
    'tg' => 'Togo',
    'th' => 'Thailand',
    'tj' => 'Tadsjikistan',
    'tk' => 'Tokelau',
    'tm' => 'Turkmenistan',
    'tn' => 'Tunesien',
    'to' => 'Tonga',
    'tp' => 'Østtimor',
    'tr' => 'Tyrkiet',
    'tt' => 'Trinidad og Tobago',
    'tv' => 'Tuvalu',
    'tw' => 'Taiwan',
    'tz' => 'Tanzania',
    'ua' => 'Ukraine',
    'ug' => 'Uganda',
    'um' => 'Amerikanske Oversøiske Øer, Mindre',
    'us' => 'USA',
    'uy' => 'Uruguay',
    'uz' => 'Usbekistan',
    'va' => 'Vatikanstaten',
    'vc' => 'St. Vincent og Grenadinerne',
    've' => 'Venezuela',
    'vg' => 'Jomfruøerne, Britiske',
    'vi' => 'Jomfruøerne, Amerikanske',
    'vn' => 'Vietnam',
    'vu' => 'Vanuatu',
    'wf' => 'Wallis-og Futunaøerne',
    'ws' => 'Samoa',
    'ye' => 'Yemen',
    'yt' => 'Mayotte',
    'yu' => 'Jugoslavien samt Serbien og Montenegro',
    'za' => 'Sydafrika',
    'zm' => 'Zambia',
    'zr' => 'Zaire',
    'zw' => 'Zimbabwe',
  );
}
