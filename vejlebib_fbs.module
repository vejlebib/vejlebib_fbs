<?php

/**
 * @file
 *
 * Vejlebib FBS module file.
 */

/**
 * Implements hook_menu_alter()
 */
function vejlebib_fbs_menu_alter(&$items) {
  $items['ding_availability/holdings']['page callback'] = 'vejlebib_fbs_holdings';
}

/**
 * Page callback for availability holdings.
 *
 * This calls ding_availability_holdings() like the original callack and is
 * just used to get an opportunity to get the provider id.
 *
 * @param array $provider_ids
 *   Providers ID's to fetch holdings information for.
 */
function vejlebib_fbs_holdings($provider_ids) {
  $provider_ids = explode(',', $provider_ids);

  // FBS doesn't support multiple ids anyway, so only modify holding rows for
  // the first id.
  vejlebib_fbs_get_provider_id(reset($provider_ids));

  drupal_json_output(ding_availability_holdings($provider_ids));
}

/**
 * Implements hook_preprocess_ding_holdings().
 */
function vejlebib_fbs_preprocess_ding_holdings(&$vars) {
  if (!empty($vars['holdings']['#rows'])) {
    $provider_id = vejlebib_fbs_get_provider_id();
    $entity = ding_entity_load(ding_provider_build_entity_id($provider_id));
    // Placement suffix.
    $suffix = '';

    //If non-fiction add the classifation. Returns empty string if 'sk'.
    if ($classification = $entity->getClassification()) {
      $suffix = $classification;
    }
    // Else look for a creator of type oss:sort.
    else if (!empty($entity->reply->record['dc:creator']['oss:sort'])) {
      // This will be an array. Assume the first creator should be shown.
      $suffix = reset($entity->reply->record['dc:creator']['oss:sort']);
    }

    if ($suffix) {
      foreach ($vars['holdings']['#rows'] as &$row) {
        $row['placement'] .= ' > ' . $suffix;
      }
    }
  }
}

/**
 * Get/set the current provider_id.
 */
function vejlebib_fbs_get_provider_id($set = NULL) {
  $provider_id = &drupal_static(__FUNCTION__);

  if (!isset($provider_id) && isset($set)) {
    $provider_id = $set;
  }

  return $provider_id;
}

